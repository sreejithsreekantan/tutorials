// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EmployeeData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EmployeeData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Employee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Employee_reflection_ = NULL;
const ::google::protobuf::Descriptor* Employee_PhoneNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Employee_PhoneNumber_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Employee_PHONETYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_EmployeeData_2eproto() {
  protobuf_AddDesc_EmployeeData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EmployeeData.proto");
  GOOGLE_CHECK(file != NULL);
  Employee_descriptor_ = file->message_type(0);
  static const int Employee_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Employee, empid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Employee, empname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Employee, phonenumber_),
  };
  Employee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Employee_descriptor_,
      Employee::default_instance_,
      Employee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Employee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Employee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Employee));
  Employee_PhoneNumber_descriptor_ = Employee_descriptor_->nested_type(0);
  static const int Employee_PhoneNumber_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Employee_PhoneNumber, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Employee_PhoneNumber, number_),
  };
  Employee_PhoneNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Employee_PhoneNumber_descriptor_,
      Employee_PhoneNumber::default_instance_,
      Employee_PhoneNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Employee_PhoneNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Employee_PhoneNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Employee_PhoneNumber));
  Employee_PHONETYPE_descriptor_ = Employee_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EmployeeData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Employee_descriptor_, &Employee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Employee_PhoneNumber_descriptor_, &Employee_PhoneNumber::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EmployeeData_2eproto() {
  delete Employee::default_instance_;
  delete Employee_reflection_;
  delete Employee_PhoneNumber::default_instance_;
  delete Employee_PhoneNumber_reflection_;
}

void protobuf_AddDesc_EmployeeData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022EmployeeData.proto\"\307\001\n\010Employee\022\r\n\005emp"
    "Id\030\001 \001(\003\022\017\n\007empName\030\002 \001(\t\022*\n\013phoneNumber"
    "\030\003 \003(\0132\025.Employee.PhoneNumber\032@\n\013PhoneNu"
    "mber\022!\n\004type\030\001 \001(\0162\023.Employee.PHONETYPE\022"
    "\016\n\006number\030\002 \001(\t\"-\n\tPHONETYPE\022\n\n\006MOBILE\020\000"
    "\022\010\n\004HOME\020\001\022\n\n\006OFFICE\020\002B\025\n\005protoB\014Employe"
    "eData", 245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EmployeeData.proto", &protobuf_RegisterTypes);
  Employee::default_instance_ = new Employee();
  Employee_PhoneNumber::default_instance_ = new Employee_PhoneNumber();
  Employee::default_instance_->InitAsDefaultInstance();
  Employee_PhoneNumber::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EmployeeData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EmployeeData_2eproto {
  StaticDescriptorInitializer_EmployeeData_2eproto() {
    protobuf_AddDesc_EmployeeData_2eproto();
  }
} static_descriptor_initializer_EmployeeData_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Employee_PHONETYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Employee_PHONETYPE_descriptor_;
}
bool Employee_PHONETYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Employee_PHONETYPE Employee::MOBILE;
const Employee_PHONETYPE Employee::HOME;
const Employee_PHONETYPE Employee::OFFICE;
const Employee_PHONETYPE Employee::PHONETYPE_MIN;
const Employee_PHONETYPE Employee::PHONETYPE_MAX;
const int Employee::PHONETYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Employee_PhoneNumber::kTypeFieldNumber;
const int Employee_PhoneNumber::kNumberFieldNumber;
#endif  // !_MSC_VER

Employee_PhoneNumber::Employee_PhoneNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Employee_PhoneNumber::InitAsDefaultInstance() {
}

Employee_PhoneNumber::Employee_PhoneNumber(const Employee_PhoneNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Employee_PhoneNumber::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Employee_PhoneNumber::~Employee_PhoneNumber() {
  SharedDtor();
}

void Employee_PhoneNumber::SharedDtor() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (this != default_instance_) {
  }
}

void Employee_PhoneNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Employee_PhoneNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Employee_PhoneNumber_descriptor_;
}

const Employee_PhoneNumber& Employee_PhoneNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EmployeeData_2eproto();
  return *default_instance_;
}

Employee_PhoneNumber* Employee_PhoneNumber::default_instance_ = NULL;

Employee_PhoneNumber* Employee_PhoneNumber::New() const {
  return new Employee_PhoneNumber;
}

void Employee_PhoneNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Employee_PhoneNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Employee.PHONETYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Employee_PHONETYPE_IsValid(value)) {
            set_type(static_cast< ::Employee_PHONETYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_number;
        break;
      }

      // optional string number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Employee_PhoneNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Employee.PHONETYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Employee_PhoneNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Employee.PHONETYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Employee_PhoneNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Employee.PHONETYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Employee_PhoneNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Employee_PhoneNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Employee_PhoneNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Employee_PhoneNumber::MergeFrom(const Employee_PhoneNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Employee_PhoneNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Employee_PhoneNumber::CopyFrom(const Employee_PhoneNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Employee_PhoneNumber::IsInitialized() const {

  return true;
}

void Employee_PhoneNumber::Swap(Employee_PhoneNumber* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Employee_PhoneNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Employee_PhoneNumber_descriptor_;
  metadata.reflection = Employee_PhoneNumber_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Employee::kEmpIdFieldNumber;
const int Employee::kEmpNameFieldNumber;
const int Employee::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

Employee::Employee()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Employee::InitAsDefaultInstance() {
}

Employee::Employee(const Employee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Employee::SharedCtor() {
  _cached_size_ = 0;
  empid_ = GOOGLE_LONGLONG(0);
  empname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Employee::~Employee() {
  SharedDtor();
}

void Employee::SharedDtor() {
  if (empname_ != &::google::protobuf::internal::kEmptyString) {
    delete empname_;
  }
  if (this != default_instance_) {
  }
}

void Employee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Employee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Employee_descriptor_;
}

const Employee& Employee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EmployeeData_2eproto();
  return *default_instance_;
}

Employee* Employee::default_instance_ = NULL;

Employee* Employee::New() const {
  return new Employee;
}

void Employee::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    empid_ = GOOGLE_LONGLONG(0);
    if (has_empname()) {
      if (empname_ != &::google::protobuf::internal::kEmptyString) {
        empname_->clear();
      }
    }
  }
  phonenumber_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Employee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 empId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &empid_)));
          set_has_empid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_empName;
        break;
      }

      // optional string empName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_empName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_empname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->empname().data(), this->empname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phoneNumber;
        break;
      }

      // repeated .Employee.PhoneNumber phoneNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phonenumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phoneNumber;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Employee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 empId = 1;
  if (has_empid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->empid(), output);
  }

  // optional string empName = 2;
  if (has_empname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->empname().data(), this->empname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->empname(), output);
  }

  // repeated .Employee.PhoneNumber phoneNumber = 3;
  for (int i = 0; i < this->phonenumber_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->phonenumber(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Employee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 empId = 1;
  if (has_empid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->empid(), target);
  }

  // optional string empName = 2;
  if (has_empname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->empname().data(), this->empname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->empname(), target);
  }

  // repeated .Employee.PhoneNumber phoneNumber = 3;
  for (int i = 0; i < this->phonenumber_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->phonenumber(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Employee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 empId = 1;
    if (has_empid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->empid());
    }

    // optional string empName = 2;
    if (has_empname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->empname());
    }

  }
  // repeated .Employee.PhoneNumber phoneNumber = 3;
  total_size += 1 * this->phonenumber_size();
  for (int i = 0; i < this->phonenumber_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phonenumber(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Employee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Employee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Employee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Employee::MergeFrom(const Employee& from) {
  GOOGLE_CHECK_NE(&from, this);
  phonenumber_.MergeFrom(from.phonenumber_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_empid()) {
      set_empid(from.empid());
    }
    if (from.has_empname()) {
      set_empname(from.empname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Employee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Employee::CopyFrom(const Employee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Employee::IsInitialized() const {

  return true;
}

void Employee::Swap(Employee* other) {
  if (other != this) {
    std::swap(empid_, other->empid_);
    std::swap(empname_, other->empname_);
    phonenumber_.Swap(&other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Employee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Employee_descriptor_;
  metadata.reflection = Employee_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
