// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EmployeeData.proto

#ifndef PROTOBUF_EmployeeData_2eproto__INCLUDED
#define PROTOBUF_EmployeeData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EmployeeData_2eproto();
void protobuf_AssignDesc_EmployeeData_2eproto();
void protobuf_ShutdownFile_EmployeeData_2eproto();

class Employee;
class Employee_PhoneNumber;

enum Employee_PHONETYPE {
  Employee_PHONETYPE_MOBILE = 0,
  Employee_PHONETYPE_HOME = 1,
  Employee_PHONETYPE_OFFICE = 2
};
bool Employee_PHONETYPE_IsValid(int value);
const Employee_PHONETYPE Employee_PHONETYPE_PHONETYPE_MIN = Employee_PHONETYPE_MOBILE;
const Employee_PHONETYPE Employee_PHONETYPE_PHONETYPE_MAX = Employee_PHONETYPE_OFFICE;
const int Employee_PHONETYPE_PHONETYPE_ARRAYSIZE = Employee_PHONETYPE_PHONETYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* Employee_PHONETYPE_descriptor();
inline const ::std::string& Employee_PHONETYPE_Name(Employee_PHONETYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    Employee_PHONETYPE_descriptor(), value);
}
inline bool Employee_PHONETYPE_Parse(
    const ::std::string& name, Employee_PHONETYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Employee_PHONETYPE>(
    Employee_PHONETYPE_descriptor(), name, value);
}
// ===================================================================

class Employee_PhoneNumber : public ::google::protobuf::Message {
 public:
  Employee_PhoneNumber();
  virtual ~Employee_PhoneNumber();

  Employee_PhoneNumber(const Employee_PhoneNumber& from);

  inline Employee_PhoneNumber& operator=(const Employee_PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Employee_PhoneNumber& default_instance();

  void Swap(Employee_PhoneNumber* other);

  // implements Message ----------------------------------------------

  Employee_PhoneNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Employee_PhoneNumber& from);
  void MergeFrom(const Employee_PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Employee.PHONETYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Employee_PHONETYPE type() const;
  inline void set_type(::Employee_PHONETYPE value);

  // optional string number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // @@protoc_insertion_point(class_scope:Employee.PhoneNumber)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* number_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EmployeeData_2eproto();
  friend void protobuf_AssignDesc_EmployeeData_2eproto();
  friend void protobuf_ShutdownFile_EmployeeData_2eproto();

  void InitAsDefaultInstance();
  static Employee_PhoneNumber* default_instance_;
};
// -------------------------------------------------------------------

class Employee : public ::google::protobuf::Message {
 public:
  Employee();
  virtual ~Employee();

  Employee(const Employee& from);

  inline Employee& operator=(const Employee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Employee& default_instance();

  void Swap(Employee* other);

  // implements Message ----------------------------------------------

  Employee* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Employee& from);
  void MergeFrom(const Employee& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Employee_PhoneNumber PhoneNumber;

  typedef Employee_PHONETYPE PHONETYPE;
  static const PHONETYPE MOBILE = Employee_PHONETYPE_MOBILE;
  static const PHONETYPE HOME = Employee_PHONETYPE_HOME;
  static const PHONETYPE OFFICE = Employee_PHONETYPE_OFFICE;
  static inline bool PHONETYPE_IsValid(int value) {
    return Employee_PHONETYPE_IsValid(value);
  }
  static const PHONETYPE PHONETYPE_MIN =
    Employee_PHONETYPE_PHONETYPE_MIN;
  static const PHONETYPE PHONETYPE_MAX =
    Employee_PHONETYPE_PHONETYPE_MAX;
  static const int PHONETYPE_ARRAYSIZE =
    Employee_PHONETYPE_PHONETYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PHONETYPE_descriptor() {
    return Employee_PHONETYPE_descriptor();
  }
  static inline const ::std::string& PHONETYPE_Name(PHONETYPE value) {
    return Employee_PHONETYPE_Name(value);
  }
  static inline bool PHONETYPE_Parse(const ::std::string& name,
      PHONETYPE* value) {
    return Employee_PHONETYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 empId = 1;
  inline bool has_empid() const;
  inline void clear_empid();
  static const int kEmpIdFieldNumber = 1;
  inline ::google::protobuf::int64 empid() const;
  inline void set_empid(::google::protobuf::int64 value);

  // optional string empName = 2;
  inline bool has_empname() const;
  inline void clear_empname();
  static const int kEmpNameFieldNumber = 2;
  inline const ::std::string& empname() const;
  inline void set_empname(const ::std::string& value);
  inline void set_empname(const char* value);
  inline void set_empname(const char* value, size_t size);
  inline ::std::string* mutable_empname();
  inline ::std::string* release_empname();
  inline void set_allocated_empname(::std::string* empname);

  // repeated .Employee.PhoneNumber phoneNumber = 3;
  inline int phonenumber_size() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 3;
  inline const ::Employee_PhoneNumber& phonenumber(int index) const;
  inline ::Employee_PhoneNumber* mutable_phonenumber(int index);
  inline ::Employee_PhoneNumber* add_phonenumber();
  inline const ::google::protobuf::RepeatedPtrField< ::Employee_PhoneNumber >&
      phonenumber() const;
  inline ::google::protobuf::RepeatedPtrField< ::Employee_PhoneNumber >*
      mutable_phonenumber();

  // @@protoc_insertion_point(class_scope:Employee)
 private:
  inline void set_has_empid();
  inline void clear_has_empid();
  inline void set_has_empname();
  inline void clear_has_empname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 empid_;
  ::std::string* empname_;
  ::google::protobuf::RepeatedPtrField< ::Employee_PhoneNumber > phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_EmployeeData_2eproto();
  friend void protobuf_AssignDesc_EmployeeData_2eproto();
  friend void protobuf_ShutdownFile_EmployeeData_2eproto();

  void InitAsDefaultInstance();
  static Employee* default_instance_;
};
// ===================================================================


// ===================================================================

// Employee_PhoneNumber

// optional .Employee.PHONETYPE type = 1;
inline bool Employee_PhoneNumber::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Employee_PhoneNumber::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Employee_PhoneNumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Employee_PhoneNumber::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Employee_PHONETYPE Employee_PhoneNumber::type() const {
  return static_cast< ::Employee_PHONETYPE >(type_);
}
inline void Employee_PhoneNumber::set_type(::Employee_PHONETYPE value) {
  assert(::Employee_PHONETYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string number = 2;
inline bool Employee_PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Employee_PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Employee_PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Employee_PhoneNumber::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& Employee_PhoneNumber::number() const {
  return *number_;
}
inline void Employee_PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void Employee_PhoneNumber::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void Employee_PhoneNumber::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Employee_PhoneNumber::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* Employee_PhoneNumber::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Employee_PhoneNumber::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Employee

// optional int64 empId = 1;
inline bool Employee::has_empid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Employee::set_has_empid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Employee::clear_has_empid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Employee::clear_empid() {
  empid_ = GOOGLE_LONGLONG(0);
  clear_has_empid();
}
inline ::google::protobuf::int64 Employee::empid() const {
  return empid_;
}
inline void Employee::set_empid(::google::protobuf::int64 value) {
  set_has_empid();
  empid_ = value;
}

// optional string empName = 2;
inline bool Employee::has_empname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Employee::set_has_empname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Employee::clear_has_empname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Employee::clear_empname() {
  if (empname_ != &::google::protobuf::internal::kEmptyString) {
    empname_->clear();
  }
  clear_has_empname();
}
inline const ::std::string& Employee::empname() const {
  return *empname_;
}
inline void Employee::set_empname(const ::std::string& value) {
  set_has_empname();
  if (empname_ == &::google::protobuf::internal::kEmptyString) {
    empname_ = new ::std::string;
  }
  empname_->assign(value);
}
inline void Employee::set_empname(const char* value) {
  set_has_empname();
  if (empname_ == &::google::protobuf::internal::kEmptyString) {
    empname_ = new ::std::string;
  }
  empname_->assign(value);
}
inline void Employee::set_empname(const char* value, size_t size) {
  set_has_empname();
  if (empname_ == &::google::protobuf::internal::kEmptyString) {
    empname_ = new ::std::string;
  }
  empname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Employee::mutable_empname() {
  set_has_empname();
  if (empname_ == &::google::protobuf::internal::kEmptyString) {
    empname_ = new ::std::string;
  }
  return empname_;
}
inline ::std::string* Employee::release_empname() {
  clear_has_empname();
  if (empname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = empname_;
    empname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Employee::set_allocated_empname(::std::string* empname) {
  if (empname_ != &::google::protobuf::internal::kEmptyString) {
    delete empname_;
  }
  if (empname) {
    set_has_empname();
    empname_ = empname;
  } else {
    clear_has_empname();
    empname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Employee.PhoneNumber phoneNumber = 3;
inline int Employee::phonenumber_size() const {
  return phonenumber_.size();
}
inline void Employee::clear_phonenumber() {
  phonenumber_.Clear();
}
inline const ::Employee_PhoneNumber& Employee::phonenumber(int index) const {
  return phonenumber_.Get(index);
}
inline ::Employee_PhoneNumber* Employee::mutable_phonenumber(int index) {
  return phonenumber_.Mutable(index);
}
inline ::Employee_PhoneNumber* Employee::add_phonenumber() {
  return phonenumber_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Employee_PhoneNumber >&
Employee::phonenumber() const {
  return phonenumber_;
}
inline ::google::protobuf::RepeatedPtrField< ::Employee_PhoneNumber >*
Employee::mutable_phonenumber() {
  return &phonenumber_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Employee_PHONETYPE>() {
  return ::Employee_PHONETYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EmployeeData_2eproto__INCLUDED
